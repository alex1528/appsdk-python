#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Instruct:
  """
  Attributes:
   - id
   - ip
   - type
   - mode
   - app
   - func
   - param
   - timeout
   - proxy
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'ip', None, None, ), # 2
    (3, TType.STRING, 'type', None, None, ), # 3
    (4, TType.STRING, 'mode', None, None, ), # 4
    (5, TType.STRING, 'app', None, None, ), # 5
    (6, TType.STRING, 'func', None, None, ), # 6
    (7, TType.STRING, 'param', None, None, ), # 7
    (8, TType.I32, 'timeout', None, None, ), # 8
    (9, TType.STRING, 'proxy', None, None, ), # 9
  )

  def __init__(self, id=None, ip=None, type=None, mode=None, app=None, func=None, param=None, timeout=None, proxy=None,):
    self.id = id
    self.ip = ip
    self.type = type
    self.mode = mode
    self.app = app
    self.func = func
    self.param = param
    self.timeout = timeout
    self.proxy = proxy

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mode = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.app = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.func = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.param = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.timeout = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.proxy = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Instruct')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 2)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 3)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.STRING, 4)
      oprot.writeString(self.mode)
      oprot.writeFieldEnd()
    if self.app is not None:
      oprot.writeFieldBegin('app', TType.STRING, 5)
      oprot.writeString(self.app)
      oprot.writeFieldEnd()
    if self.func is not None:
      oprot.writeFieldBegin('func', TType.STRING, 6)
      oprot.writeString(self.func)
      oprot.writeFieldEnd()
    if self.param is not None:
      oprot.writeFieldBegin('param', TType.STRING, 7)
      oprot.writeString(self.param)
      oprot.writeFieldEnd()
    if self.timeout is not None:
      oprot.writeFieldBegin('timeout', TType.I32, 8)
      oprot.writeI32(self.timeout)
      oprot.writeFieldEnd()
    if self.proxy is not None:
      oprot.writeFieldBegin('proxy', TType.STRING, 9)
      oprot.writeString(self.proxy)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.ip)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.mode)
    value = (value * 31) ^ hash(self.app)
    value = (value * 31) ^ hash(self.func)
    value = (value * 31) ^ hash(self.param)
    value = (value * 31) ^ hash(self.timeout)
    value = (value * 31) ^ hash(self.proxy)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Reinstruct:
  """
  Attributes:
   - ins
   - flag
   - costtime
   - result
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ins', (Instruct, Instruct.thrift_spec), None, ), # 1
    None, # 2
    (3, TType.I32, 'flag', None, None, ), # 3
    (4, TType.I32, 'costtime', None, None, ), # 4
    (5, TType.STRING, 'result', None, None, ), # 5
  )

  def __init__(self, ins=None, flag=None, costtime=None, result=None,):
    self.ins = ins
    self.flag = flag
    self.costtime = costtime
    self.result = result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ins = Instruct()
          self.ins.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.flag = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.costtime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.result = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Reinstruct')
    if self.ins is not None:
      oprot.writeFieldBegin('ins', TType.STRUCT, 1)
      self.ins.write(oprot)
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.I32, 3)
      oprot.writeI32(self.flag)
      oprot.writeFieldEnd()
    if self.costtime is not None:
      oprot.writeFieldBegin('costtime', TType.I32, 4)
      oprot.writeI32(self.costtime)
      oprot.writeFieldEnd()
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.STRING, 5)
      oprot.writeString(self.result)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ins)
    value = (value * 31) ^ hash(self.flag)
    value = (value * 31) ^ hash(self.costtime)
    value = (value * 31) ^ hash(self.result)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
